/* Classes
==========

Extendable classes that can be seen only by SASS.
It keeps the css cleaner if we decide not to use certain ones.

*/
%wrapper{
    position: relative;
    width: 100%;
    margin: 0 auto;
    max-width: $l;
}

%box{
    padding: 0 $ratio-inv + em;
    letter-spacing:normal;
    @include inline-block();
    vertical-align: top;
}

%button{
    -webkit-appearance: none;
    padding: $ratio-inv + em 1em;
    color: $white;
    background-color: $green;
    border: none;
    cursor: pointer;
    max-width: 100%;
    white-space: normal;
    text-align: center;
    @include transition(background-color, .4s);
    @include border-radius(5px);

    &:hover,
    &:focus{
        background-color: $lime;
    }

    &.full{
        width: 100%;
    }
}

/* Mixins
==========

Flexbox Mixins
----------
A couple of mixins for using content creography with Flexbox borrowed from
[here](http://blog.woop.ie/post/23227066135/content-choreography-mixin)

### flex-box()
Adds `display: flex;` to the container with all the browser prefixes

*/


@mixin flex-box() {
    .flexbox &{
        display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
        display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
        display: -ms-flexbox;      /* TWEENER - IE 10 */
        display: -webkit-flex;     /* NEW - Chrome */
        display: flex;
    }

    display: block;
    @include clearfix();

    .no-flexboxlegacy &{
        >*{
            @extend %box;
        }
    }
}

/*

### flex-size($size)
This determines the size of the box inside the flexbox model.

*/

@mixin flex-size($size) {
    .flexbox &{
        -webkit-box-flex: $size;
        -moz-box-flex: $size;
        -webkit-flex: $size;
        -ms-flex: $size;
        box-flex: $size;
        flex: $size;
    }
}

/*

### flex-order($position)
This determines the position of the box inside the flexbox model.

*/

@mixin flex-order($position) {
    display: block;
    float: left;

    .flexbox &{
        float: none;
        -webkit-box-ordinal-group: $position;
        -moz-box-ordinal-group: $position;
        -ms-flex-order: $position;
        -webkit-order: $position;
        order: $position;
    }
}

/* ---

Animation Mixins
----------
One for setting the animations and one for getting them.
Basically a prefix free way of animating with CSS3.

### keyframes($name)
This defines the animation. Pass in the name then withe the animation betweeen the curly braces as normal.

`@include keyframes(fade) {
    0%{
        opacity: 1;
    },
    100%{
        opacity: 0;
    }
}`

### animation($params)
Set this on the element you wish to animate.

`@include animation(fade 1s linear);`

*/

@mixin keyframes($name) {
    @-webkit-keyframes $name { @content }
    @-moz-keyframes    $name { @content }
    @-ms-keyframes     $name { @content }
    @keyframes         $name { @content }
}


@mixin animation($params) {
    -webkit-animation:$params;
    -moz-animation:$params;
    -ms-animation:$params;
    animation:$params;
}

/* ---

Filter Mixin
----------
Again, pretty much a vendor prefixer.

*/


@mixin filter($filter-type,$filter-amount) {
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}