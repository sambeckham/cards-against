%wrapper{
    position: relative;
    width: 100%;
    margin: 0 auto;
    max-width: $xl;

    @media (max-width: $xs) {
        width: $xs;
    }
}

%box{
    padding: 0 $ratio-inv + em;
    letter-spacing:normal;
    @include inline-block();
    vertical-align: top;
}

%button{
    -webkit-appearance: none;
    padding: $ratio-inv + em 1em;
    color: $white;
    background-color: $green;
    border: none;
    cursor: pointer;
    max-width: 100%;
    white-space: normal;
    @include transition(background-color, .4s);
    @include border-radius(5px);

    &:hover,
    &:focus{
        background-color: $lime;
    }

    &.centered{
        text-align: center;
    }

    &.full{
        width: 100%;
    }
}

/*

    Flexbox Mixins
    =================
    A couple of mixins for using content creography with Flexbox
    http://blog.woop.ie/post/23227066135/content-choreography-mixin

    Usage
    ----------
    .containing-block {
        @include boxit(vertical);

        .child-1 {
            @include boxnum(2);
        }
        .child-2 {
            @include boxnum(1);
        }
    }

*/

@mixin flex-box() {
    .flexbox &{

        display: -webkit-box;      /* OLD - iOS 6-, Safari 3.1-6 */
        display: -moz-box;         /* OLD - Firefox 19- (buggy but mostly works) */
        display: -ms-flexbox;      /* TWEENER - IE 10 */
        display: -webkit-flex;     /* NEW - Chrome */
        display: flex;
    }

    display: block;
    @include clearfix();

    .no-flexboxlegacy &{
        >*{
            @extend %box;
        }
    }
}

@mixin flex-size($size) {
    .flexbox &{
        -webkit-box-flex: $size;
        -moz-box-flex: $size;
        -webkit-flex: $size;
        -ms-flex: $size;
        box-flex: $size;
        flex: $size;
    }
}

@mixin flex-order($val) {
    display: block;
    float: left;

    .flexbox &{
        float: none;
        -webkit-box-ordinal-group: $val;
        -moz-box-ordinal-group: $val;
        -ms-flex-order: $val;
        -webkit-order: $val;
        order: $val;
    }
}

/*

    Animation Mixins
    =================
    One for setting the animations and one for getting them.

    Usage
    ----------
    Not sure yet, working on it.

*/

@mixin animation($params) {
    -webkit-animation:$params;
    -moz-animation:$params;
    -ms-animation:$params;
    animation:$params;
}

@mixin keyframes($name) {
    @-webkit-keyframes $name { @content }
    @-moz-keyframes    $name { @content }
    @-ms-keyframes     $name { @content }
    @keyframes         $name { @content }
}

/*

    Filter Mixin
    =================
    Pretty much just a prefix-free type deal.

    Usage
    ----------
    .iOS7{
        @include filter(blur, 10px);
    }

*/


@mixin filter($filter-type,$filter-amount) {
  -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
  -moz-filter: $filter-type+unquote('(#{$filter-amount})');
  -ms-filter: $filter-type+unquote('(#{$filter-amount})');
  -o-filter: $filter-type+unquote('(#{$filter-amount})');
  filter: $filter-type+unquote('(#{$filter-amount})');
}